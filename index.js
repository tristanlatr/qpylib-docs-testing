URLS=[
"index.html",
"encryption/index.html",
"encryption/cryptoutil.html",
"encryption/enginev2.html",
"encryption/enginev3.html",
"encryption/enginev4.html",
"util_qpylib.html",
"asset_qpylib.html",
"app_qpylib.html",
"rest_qpylib.html",
"log_qpylib.html",
"ariel.html",
"json_qpylib.html",
"encdec.html",
"qpylib.html",
"offense_qpylib.html"
];
INDEX=[
{
"ref":"qpylib",
"url":0,
"doc":""
},
{
"ref":"qpylib.encryption",
"url":1,
"doc":""
},
{
"ref":"qpylib.encryption.cryptoutil",
"url":2,
"doc":""
},
{
"ref":"qpylib.encryption.cryptoutil.derive_key",
"url":2,
"doc":"",
"func":1
},
{
"ref":"qpylib.encryption.enginev2",
"url":3,
"doc":""
},
{
"ref":"qpylib.encryption.enginev2.Enginev2",
"url":3,
"doc":"Enginev2 is derived from the Encryption class as contained in the older qpylib package which was distributed with - QRadarAppSDK v1.1.0 and - the app base image (CentOS) in 7.3.2+. The code has been converted from Python 2 to Python 3. The most significant changes in the Python 2 to 3 conversion were the addition of encode/decode calls to convert between string and bytes values. Also, Crypto packages now come from pycryptodome, not pycrypto. Enginev2 uses AES/CFB encryption. config should contain the following fields: salt, UUID, ivz, iterations."
},
{
"ref":"qpylib.encryption.enginev2.Enginev2.decrypt",
"url":3,
"doc":"",
"func":1
},
{
"ref":"qpylib.encryption.enginev3",
"url":4,
"doc":""
},
{
"ref":"qpylib.encryption.enginev3.Enginev3",
"url":4,
"doc":"Enginev3 uses a modified version of Enginev2's AES/CFB encryption. config should contain the following fields: salt, UUID, ivz, iterations."
},
{
"ref":"qpylib.encryption.enginev3.Enginev3.decrypt",
"url":4,
"doc":"",
"func":1
},
{
"ref":"qpylib.encryption.enginev4",
"url":5,
"doc":""
},
{
"ref":"qpylib.encryption.enginev4.Enginev4",
"url":5,
"doc":"Enginev4 uses Fernet encryption. See https: cryptography.io/en/latest/fernet."
},
{
"ref":"qpylib.encryption.enginev4.Enginev4.encrypt",
"url":5,
"doc":"",
"func":1
},
{
"ref":"qpylib.encryption.enginev4.Enginev4.decrypt",
"url":5,
"doc":"",
"func":1
},
{
"ref":"qpylib.encryption.enginev4.Enginev4.generate_config",
"url":5,
"doc":"",
"func":1
},
{
"ref":"qpylib.util_qpylib",
"url":6,
"doc":""
},
{
"ref":"qpylib.util_qpylib.is_sdk",
"url":6,
"doc":"",
"func":1
},
{
"ref":"qpylib.util_qpylib.is_ipv6_address",
"url":6,
"doc":"",
"func":1
},
{
"ref":"qpylib.asset_qpylib",
"url":7,
"doc":""
},
{
"ref":"qpylib.asset_qpylib.get_asset_url",
"url":7,
"doc":"",
"func":1
},
{
"ref":"qpylib.asset_qpylib.get_asset_url_full",
"url":7,
"doc":"",
"func":1
},
{
"ref":"qpylib.asset_qpylib.get_asset_json",
"url":7,
"doc":"",
"func":1
},
{
"ref":"qpylib.asset_qpylib.get_asset_rendering",
"url":7,
"doc":"",
"func":1
},
{
"ref":"qpylib.asset_qpylib.get_asset_json_ld",
"url":7,
"doc":"",
"func":1
},
{
"ref":"qpylib.asset_qpylib.get_asset_json_html",
"url":7,
"doc":"",
"func":1
},
{
"ref":"qpylib.asset_qpylib.get_asset_html_example",
"url":7,
"doc":"",
"func":1
},
{
"ref":"qpylib.app_qpylib",
"url":8,
"doc":""
},
{
"ref":"qpylib.app_qpylib.get_app_id",
"url":8,
"doc":"",
"func":1
},
{
"ref":"qpylib.app_qpylib.get_app_name",
"url":8,
"doc":"",
"func":1
},
{
"ref":"qpylib.app_qpylib.get_manifest_json",
"url":8,
"doc":"",
"func":1
},
{
"ref":"qpylib.app_qpylib.get_manifest_field_value",
"url":8,
"doc":"",
"func":1
},
{
"ref":"qpylib.app_qpylib.get_root_path",
"url":8,
"doc":"",
"func":1
},
{
"ref":"qpylib.app_qpylib.get_store_path",
"url":8,
"doc":"",
"func":1
},
{
"ref":"qpylib.app_qpylib.get_log_path",
"url":8,
"doc":"",
"func":1
},
{
"ref":"qpylib.app_qpylib.get_endpoint_url",
"url":8,
"doc":"",
"func":1
},
{
"ref":"qpylib.app_qpylib.get_console_ip",
"url":8,
"doc":"",
"func":1
},
{
"ref":"qpylib.app_qpylib.get_console_fqdn",
"url":8,
"doc":"",
"func":1
},
{
"ref":"qpylib.app_qpylib.get_env_var",
"url":8,
"doc":"",
"func":1
},
{
"ref":"qpylib.app_qpylib.get_app_base_url",
"url":8,
"doc":"Gets the full url that will proxy an app request to its plugin servlet. If any of the information required for building the proxy is missing then an empty string is returned.",
"func":1
},
{
"ref":"qpylib.rest_qpylib",
"url":9,
"doc":""
},
{
"ref":"qpylib.rest_qpylib.rest",
"url":9,
"doc":"",
"func":1
},
{
"ref":"qpylib.log_qpylib",
"url":10,
"doc":""
},
{
"ref":"qpylib.log_qpylib.create_log",
"url":10,
"doc":"",
"func":1
},
{
"ref":"qpylib.log_qpylib.log",
"url":10,
"doc":"",
"func":1
},
{
"ref":"qpylib.log_qpylib.set_log_level",
"url":10,
"doc":"",
"func":1
},
{
"ref":"qpylib.log_qpylib.NotificationCodeFilter",
"url":10,
"doc":"Filter which adds a field named ncode to each log record. Allows notification code to be specified in log handler format strings. Initialize a filter. Initialize with the name of the logger which, together with its children, will have its events allowed through the filter. If no name is specified, allow every event."
},
{
"ref":"qpylib.log_qpylib.NotificationCodeFilter.Q_INFO_CODE",
"url":10,
"doc":""
},
{
"ref":"qpylib.log_qpylib.NotificationCodeFilter.Q_WARNING_CODE",
"url":10,
"doc":""
},
{
"ref":"qpylib.log_qpylib.NotificationCodeFilter.Q_ERROR_CODE",
"url":10,
"doc":""
},
{
"ref":"qpylib.log_qpylib.NotificationCodeFilter.filter",
"url":10,
"doc":"Determine if the specified record is to be logged. Is the specified record to be logged? Returns 0 for no, nonzero for yes. If deemed appropriate, the record may be modified in-place.",
"func":1
},
{
"ref":"qpylib.ariel",
"url":11,
"doc":""
},
{
"ref":"qpylib.ariel.ArielError",
"url":11,
"doc":"All Ariel errors are reported via this class. message: explanation of the error. aql: the AQL query, if applicable."
},
{
"ref":"qpylib.ariel.ArielSearch",
"url":11,
"doc":"Convenience functions for executing Ariel searches using the QRadar REST API."
},
{
"ref":"qpylib.ariel.ArielSearch.SEARCHES_ENDPOINT",
"url":11,
"doc":""
},
{
"ref":"qpylib.ariel.ArielSearch.SEARCH_ENDPOINT",
"url":11,
"doc":""
},
{
"ref":"qpylib.ariel.ArielSearch.RESULTS_ENDPOINT",
"url":11,
"doc":""
},
{
"ref":"qpylib.ariel.ArielSearch.search",
"url":11,
"doc":"Initiates an asynchronous Ariel search. query: AQL query to execute. api_version: QRadar API version to use, defaults to latest. Returns a tuple containing search status and search ID. Raises ArielError if the search could not be created.",
"func":1
},
{
"ref":"qpylib.ariel.ArielSearch.search_sync",
"url":11,
"doc":"Initiates a synchronous Ariel search. query: AQL query to execute. timeout: number of seconds to wait for search to complete. sleep_interval: number of seconds to sleep before retrying status check. api_version: QRadar API version to use, defaults to latest. Returns a tuple containing search ID and record count. Raises ArielError if any of these occur: search could not be created. search was cancelled or resulted in an error. search did not complete within the timeout.",
"func":1
},
{
"ref":"qpylib.ariel.ArielSearch.status",
"url":11,
"doc":"Retrieves status information for a search. search_id: Ariel search ID. api_version: QRadar API version to use, defaults to latest. Returns a tuple containing search status and record count. Raises ArielError if the status information could not be retrieved.",
"func":1
},
{
"ref":"qpylib.ariel.ArielSearch.results",
"url":11,
"doc":"Retrieves the results of an Ariel search. search_id: Ariel search ID. start, end: range of records to return. api_version: QRadar API version to use, defaults to latest. Raises ValueError if start/end range is not valid. Raises ArielError if results could not be retrieved.",
"func":1
},
{
"ref":"qpylib.ariel.ArielSearch.delete",
"url":11,
"doc":"Deletes a previous Ariel search. search_id: Ariel search ID api_version: QRadar API version to use, defaults to latest. Returns search status. Raises ArielError if the search could not be deleted.",
"func":1
},
{
"ref":"qpylib.ariel.ArielSearch.cancel",
"url":11,
"doc":"Cancels an ongoing Ariel search. search_id: Ariel search ID. api_version: QRadar API version to use, defaults to latest. Returns search status. Raises ArielError if the search could not be cancelled.",
"func":1
},
{
"ref":"qpylib.json_qpylib",
"url":12,
"doc":""
},
{
"ref":"qpylib.json_qpylib.register_jsonld_endpoints",
"url":12,
"doc":"",
"func":1
},
{
"ref":"qpylib.json_qpylib.register_jsonld_type",
"url":12,
"doc":"",
"func":1
},
{
"ref":"qpylib.json_qpylib.register_jsonld_type_from_context",
"url":12,
"doc":"",
"func":1
},
{
"ref":"qpylib.json_qpylib.get_jsonld_type",
"url":12,
"doc":"",
"func":1
},
{
"ref":"qpylib.json_qpylib.render_jsonld_type",
"url":12,
"doc":"",
"func":1
},
{
"ref":"qpylib.json_qpylib.json_ld",
"url":12,
"doc":"",
"func":1
},
{
"ref":"qpylib.json_qpylib.json_html",
"url":12,
"doc":"",
"func":1
},
{
"ref":"qpylib.json_qpylib.to_json_dict",
"url":12,
"doc":"",
"func":1
},
{
"ref":"qpylib.encdec",
"url":13,
"doc":""
},
{
"ref":"qpylib.encdec.EncryptionError",
"url":13,
"doc":"All errors encountered by Encryption are reported via this class"
},
{
"ref":"qpylib.encdec.Encryption",
"url":13,
"doc":"Convenience functions for managing encrypted data items. The first incarnation of encdec was distributed as a stand-alone module, not part of qpylib. It is no longer supported. In retrospect, that version has been designated as v1, and engine versions here start at v2. Developer information           - If the encryption algorithm needs to be changed, follow these steps: - Create a new engine version class in qpylib.encryption. - In the previous engine version class, remove all encryption-related functions, leaving only decryption-related code. - Update the engines dictionary below. data is an object containing two non-empty strings: 'name': a label for the item you want to encrypt. 'user': a user identifier that is used to create a store file to hold the encrypted item and accompanying configuration. A user's store file can hold multiple encrypted items."
},
{
"ref":"qpylib.encdec.Encryption.engines",
"url":13,
"doc":""
},
{
"ref":"qpylib.encdec.Encryption.latest_engine_version",
"url":13,
"doc":""
},
{
"ref":"qpylib.encdec.Encryption.encrypt",
"url":13,
"doc":"Encrypts clear_text using the latest engine version. Stores the encrypted value using the data provided to the init function, i.e. in a store file named 'user'_e.db under label 'name'. Returns the encrypted value.",
"func":1
},
{
"ref":"qpylib.encdec.Encryption.decrypt",
"url":13,
"doc":"Decrypts the item with label 'name' from store file named 'user'_e.db (see init function), using the appropriate engine version. If the item was originally encrypted using an older engine version, it is re-encrypted using the latest engine, and the store file content for the item is replaced. Returns the decrypted value.",
"func":1
},
{
"ref":"qpylib.encdec.Encryption.latest_engine_class",
"url":13,
"doc":"",
"func":1
},
{
"ref":"qpylib.qpylib",
"url":14,
"doc":""
},
{
"ref":"qpylib.qpylib.create_log",
"url":14,
"doc":"Initialises logging. Threshold log level is set to the value of the \"log_level\" field in the app manifest.json, or INFO if that field is absent. Creates a file log handler which directs logs to store/log/app.log. Creates a Syslog handler, but only if environment variables QRADAR_CONSOLE_IP and QRADAR_APP_UUID are both set. Must be called before any call to log() or set_log_level(). Raises ValueError if the manifest threshold log level is invalid.",
"func":1
},
{
"ref":"qpylib.qpylib.log",
"url":14,
"doc":"Logs a message at the given level, which defaults to INFO. Level values: DEBUG, INFO, WARNING, ERROR, EXCEPTION, CRITICAL. EXCEPTION is ERROR plus extra exception details. Raises RuntimeError if logging was not previously initialised by a call to qpylib.create_log(). Raises ValueError if level is invalid.",
"func":1
},
{
"ref":"qpylib.qpylib.set_log_level",
"url":14,
"doc":"Sets the threshold log level. Level values: DEBUG, INFO, WARNING, ERROR, CRITICAL. Raises RuntimeError if logging was not previously initialised by a call to qpylib.create_log(). Raises ValueError if level is invalid.",
"func":1
},
{
"ref":"qpylib.qpylib.get_app_id",
"url":14,
"doc":"Returns the \"app_id\" value from the app manifest, or 0 if app_id is not in the manifest.",
"func":1
},
{
"ref":"qpylib.qpylib.get_app_name",
"url":14,
"doc":"Returns the \"name\" value from the app manifest. Raises KeyError if \"name\" is not in the manifest.",
"func":1
},
{
"ref":"qpylib.qpylib.get_manifest_json",
"url":14,
"doc":"Returns the content of the app manifest as a Python object.",
"func":1
},
{
"ref":"qpylib.qpylib.get_manifest_field_value",
"url":14,
"doc":"Returns the value of \"key\" from the app manifest. If \"key\" is not in the manifest and default_value was supplied, default_value is returned. Raises KeyError if \"key\" is not in the manifest and no default_value was supplied.",
"func":1
},
{
"ref":"qpylib.qpylib.get_root_path",
"url":14,
"doc":"Returns the app's root path, joined with path_entries if supplied. The app's root path is the location of the app directory and manifest.json file. Raises KeyError if environment variable APP_ROOT is not set.",
"func":1
},
{
"ref":"qpylib.qpylib.get_store_path",
"url":14,
"doc":"Returns the app's store path, joined with path_entries if supplied. Raises KeyError if environment variable APP_ROOT is not set.",
"func":1
},
{
"ref":"qpylib.qpylib.get_app_base_url",
"url":14,
"doc":"Returns the QRadar app proxy prefix.",
"func":1
},
{
"ref":"qpylib.qpylib.q_url_for",
"url":14,
"doc":"Returns the QRadar app proxy prefix joined to the Flask endpoint url.",
"func":1
},
{
"ref":"qpylib.qpylib.get_console_address",
"url":14,
"doc":"Returns the QRadar console IP address. Raises KeyError if environment variable QRADAR_CONSOLE_IP is not set.",
"func":1
},
{
"ref":"qpylib.qpylib.get_console_fqdn",
"url":14,
"doc":"Returns the QRadar console fully-qualified domain name. Raises KeyError if environment variable QRADAR_CONSOLE_FQDN is not set.",
"func":1
},
{
"ref":"qpylib.qpylib.REST",
"url":14,
"doc":"Invokes a rest_action request to request_url using the Python requests module. Returns a requests.Response object. Raises ValueError if rest_action is not one of GET, PUT, POST, DELETE.",
"func":1
},
{
"ref":"qpylib.qpylib.to_json_dict",
"url":14,
"doc":"Converts a Python object into a dict usable with the REST function. Recursively converts fields which are also Python objects.",
"func":1
},
{
"ref":"qpylib.qpylib.register_jsonld_endpoints",
"url":14,
"doc":"Registers JSON-LD endpoints from the app manifest.",
"func":1
},
{
"ref":"qpylib.qpylib.register_jsonld_type",
"url":14,
"doc":"Registers a JSON-LD endpoint from the given context.",
"func":1
},
{
"ref":"qpylib.qpylib.get_offense_rendering",
"url":14,
"doc":"Returns an offense, rendered according to render_type. render_type is HTML or JSONLD.",
"func":1
},
{
"ref":"qpylib.qpylib.get_asset_rendering",
"url":14,
"doc":"Returns an asset, rendered according to render_type. render_type is HTML or JSONLD.",
"func":1
},
{
"ref":"qpylib.qpylib.render_jsonld_type",
"url":14,
"doc":"Returns a JSON-LD type value rendered as a JSON-formatted string.",
"func":1
},
{
"ref":"qpylib.offense_qpylib",
"url":15,
"doc":""
},
{
"ref":"qpylib.offense_qpylib.get_offense_url",
"url":15,
"doc":"",
"func":1
},
{
"ref":"qpylib.offense_qpylib.get_offense_url_full",
"url":15,
"doc":"",
"func":1
},
{
"ref":"qpylib.offense_qpylib.get_offense_json",
"url":15,
"doc":"",
"func":1
},
{
"ref":"qpylib.offense_qpylib.get_offense_rendering",
"url":15,
"doc":"",
"func":1
},
{
"ref":"qpylib.offense_qpylib.get_offense_json_ld",
"url":15,
"doc":"",
"func":1
},
{
"ref":"qpylib.offense_qpylib.get_offense_json_html",
"url":15,
"doc":"",
"func":1
},
{
"ref":"qpylib.offense_qpylib.get_offense_html_example",
"url":15,
"doc":"",
"func":1
},
{
"ref":"qpylib.offense_qpylib.get_offense_html_header",
"url":15,
"doc":"",
"func":1
}
]